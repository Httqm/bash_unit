#!/bin/bash

NOCOLOR="\e[0m"
RED="\e[91m"
GREEN="\e[92m"
YELLOW="\e[93m"
BLUE="\e[94m"

fail() {
  local MESSAGE=$1
  format "$RED" "FAILURE"
  [[ -z "$MESSAGE" ]] || printf -- "$MESSAGE\n"
  print_stack | grep -v ^$BASH_SOURCE | format "$YELLOW"
  exit 1
}

assert() {
  local assertion=$1
  local message=$2
  local tmp_file=/tmp/$$.assert.stderr
  eval "($assertion)" >/dev/null 2>$tmp_file || \
    (message="$message$(cat $tmp_file)"; rm $tmp_file; fail "$message")
}

assert_fail() {
  local assertion=$1
  local message=$2
  eval "($assertion)" >/dev/null 2>&1 && fail "$message" || true
}

assert_status_code() {
  local expected_status=$1
  local assertion="$2"
  local message="$3"
  local status
  eval "($assertion)" >/dev/null 2>&1 && status=$? || status=$?
  assert_equals $expected_status $status "$message"
}

assert_equals() {
  local expected=$1
  local actual=$2
  local message=$3
  [[ -z $message ]] || message="$message\n"
  
  [ "$expected" = "$actual" ] || \
    fail "$message expected [$expected] but was [$actual]"
}

fake() {
  local command=$1
  shift
  if [ $# -gt 0 ]
  then
    eval "function $command() { export FAKE_PARAMS=\"\$@\" ; $@ ; }"
  else
    eval "function $command() { echo \"$(cat)\" ; }"
  fi
  export -f $command
}

run_test_suite() {
  local failure=0
  for test in $(set | grep  -E '^test.* ()' | sed -e 's: .*::')
  do
    declare -F | grep ' setup$' >/dev/null && setup
    (run_test $test)
    failure=$(( $? || $failure))
  done
  return $failure
}

print_stack() {
  local i=1
  while ! [ -z ${BASH_SOURCE[$i]} ]
  do
    echo ${BASH_SOURCE[$i]}:${FUNCNAME[$i]}\(\):${BASH_LINENO[$((i-1))]}
    i=$(($i + 1))
  done
}

format() {
  local color=$1
  shift
  if [ -t 1 ] ; then echo -en "$color" ; fi
  if [ $# -gt 0 ]
  then
    echo $*
  else
    cat
  fi
  if [ -t 1 ] ; then echo -en "$NOCOLOR" ; fi
}

run_test() {
    set -e
    local TEST=$1
    echo -n "Running $TEST... " | format "$BLUE"
    $TEST
    format "$GREEN" "SUCCESS"
}

#run tests received as parameters

failure=0
for test in "$@"
do
  echo "Running tests in $test"
  (source "$test"; run_test_suite)
  failure=$(( $? || $failure))
done
exit $failure
